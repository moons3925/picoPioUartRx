.program picoPioUartRx
    wait 0 pin 0        ; GPIO0のスタートビットを待ちます
    set y, 8 [10]       ; yに8をセットし10クロック遅延します
bitloop:                ; 
    in pins, 1          ; 指定されたピンから1ビット読みます
    jmp y-- bitloop [6] ; 次のビットを読む時間になるまで待ちます

.program picoPioUartTx
.side_set 1 opt

; An 8n1 UART transmit program.
; OUT pin 0 and side-set pin 0 are both mapped to UART TX pin.

; TX FIFO からOSRに取り込み、サイドセットピンを"high"にして、7クロック遅延します
    pull       side 1 [7]
; Xに8をセットし、サイドセットピンを"low"にして、7クロック遅延します（スタートビット）
    set x, 8   side 0 [7]
bitloop:
; OSRから1ビットpinsに出力します
    out pins, 1
; Xがゼロになるまでループします
    jmp x-- bitloop   [6]
; ゼロになったら pull side 1 [7] の命令に移動します

% c-sdk {
#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void picoPioUartRx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {

    // 連続する複数のピンに方向を指定します
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    // GPIOを初期化します
    pio_gpio_init(pio, pin);

    // GPIOをプルアップします
    gpio_pull_up(pin);

    // デフォルト設定を得ます
    pio_sm_config c = picoPioUartRx_program_get_default_config(offset);

    // ピンを入力に設定します(pin = GPIO0)
    sm_config_set_in_pins(&c, pin); // for WAIT, IN

    // 右シフト、自動pushする、スレッショルドを9に設定します
    // LSBファーストなので右シフトする
    // データ8ビット+パリティ付きなのでスレッショルドは9
    sm_config_set_in_shift(&c, true, true, 9);

    // 1クロックを通信速度の8倍に設定します
    // （クロック8個で1ビット分の幅になる仕様）
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);
    
    // SMを初期化します
    pio_sm_init(pio, sm, offset, &c);

    // SMを有効にします
    pio_sm_set_enabled(pio, sm, true);
}

static inline void picoPioUartTx_program_init(PIO pio, uint sm, uint offset, uint pin_tx, uint baud) {
    // マスクしてピンを設定します
    pio_sm_set_pins_with_mask(pio, sm, 1u << pin_tx, 1u << pin_tx);

    // マスクしてピン方向を設定します
    pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin_tx, 1u << pin_tx);

    // GPIO初期化します
    pio_gpio_init(pio, pin_tx);

    // デフォルト設定を得ます
    pio_sm_config c = picoPioUartTx_program_get_default_config(offset);

    // 右シフト、自動pullしない、スレッショルドを9に設定します
    // LSBファーストなので右シフトする
    // アセンブラで pull命令を書いているので自動pullは不要
    // データ8ビット+パリティ付きなのでスレッショルドは9
    sm_config_set_out_shift(&c, true, false, 9);

    // 出力に設定します(pin_tx = GPIO0)
    sm_config_set_out_pins(&c, pin_tx, 1);
    // サイドセットピンを設定します(pin_tx = GPIO0)
    // （出力ピンとサイドセットピンに同じものを指定することも可能）
    sm_config_set_sideset_pins(&c, pin_tx);

    // 1クロックを通信速度の8倍に設定します
    // （クロック8個で1ビット分の幅になる仕様）
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);

    // SMを初期化します
    pio_sm_init(pio, sm, offset, &c);
    // SMを有効にします
    pio_sm_set_enabled(pio, sm, true);
}

%}
